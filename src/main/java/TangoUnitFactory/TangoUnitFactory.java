//+============================================================================
// $Source: /usr/local/CVS/DeviceServer/Generic/Quality/TangoUnit/src/main/java/TangoUnitFactory/TangoUnitFactory.java,v $
//
// project :     Tango Device Server
//
// Description:	java source code for the TangoUnitFactory class and its commands.
//              This class is derived from DeviceImpl class.
//              It represents the CORBA servant obbject which
//              will be accessed from the network. All commands which
//              can be executed on the TangoUnitFactory are implemented
//              in this file.
//
// $Author: hardion $
//
// $Revision: 1.6 $
//
// $Log: TangoUnitFactory.java,v $
// Revision 1.6  2011/02/18 15:05:42  hardion
// release
//
// Revision 1.5  2010/08/03 14:35:32  abeille
// add delete_device for tangorb 7.3.2
//
// Revision 1.4  2009/01/28 16:20:32  hardion
// Fix concurrent pb
// Init of TAngoUnit clean correctly the db
// Clean TangoUnit before release by factory
//
// Revision 1.3  2009/01/26 10:30:34  hardion
// * release TangoUnit when init Factory
// * add release all in Factory (expert use only)
// * add adding properties for device in TangoUnit
//
// Revision 1.2  2009/01/22 16:31:35  hardion
// * add asynchronous mode
// * fix release of device controlled by the factory
//
// Revision 1.1  2009/01/21 15:17:39  hardion
// * try to add a factory for Tangounit device creation bug:11454
// * finish implementation of remote client
//
//
// copyleft :   European Synchrotron Radiation Facility
//              BP 220, Grenoble 38043
//              FRANCE
//
//-============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
package TangoUnitFactory;

import java.util.Iterator;
import java.util.Vector;

import org.omg.CORBA.SystemException;
import org.omg.CORBA.UserException;

import TangoUnit.TangoUnit;
import fr.esrf.Tango.DevFailed;
import fr.esrf.Tango.DevState;
import fr.esrf.TangoApi.ApiUtil;
import fr.esrf.TangoDs.Attribute;
import fr.esrf.TangoDs.DeviceClass;
import fr.esrf.TangoDs.DeviceImpl;
import fr.esrf.TangoDs.Except;
import fr.esrf.TangoDs.TangoConst;
import fr.esrf.TangoDs.Util;
import fr.soleil.tangounit.Session;
import fr.soleil.tangounit.device.Device;

/**
 * Class Description: This class has the role to create and manage TangoUnit
 * device. It based on factory pattern. It allows to create device on the same
 * process (asa same JVM) while its execution.
 * 
 * @author $Author: hardion $
 * @version $Revision: 1.6 $
 */
// --------- Start of States Description ----------
/*
 * Device States Description:
 */
// --------- End of States Description ----------
public class TangoUnitFactory extends DeviceImpl implements TangoConst {

    protected int state;
    // --------- Start of attributes data members ----------
    protected String[] attr_controlledDevices_read = new String[2550];
    // --------- End of attributes data members ----------
    // --------- Start of properties data members ----------
    // --------- End of properties data members ----------
    // Add your own data members here
    // --------------------------------------
    private Session factorySession = null;

    // =========================================================
    /**
     * Constructor for simulated Time Device Server.
     * 
     * @param cl
     *            The DeviceClass object
     * @param s
     *            The Device name.
     */
    // =========================================================
    TangoUnitFactory(final DeviceClass cl, final String s) throws DevFailed {
        super(cl, s);
        init_device();
    }

    // =========================================================
    /**
     * Constructor for simulated Time Device Server.
     * 
     * @param cl
     *            The DeviceClass object
     * @param s
     *            The Device name.
     * @param d
     *            Device description.
     */
    // =========================================================
    TangoUnitFactory(final DeviceClass cl, final String s, final String d) throws DevFailed {
        super(cl, s, d);
        init_device();
    }

    // =========================================================
    /**
     * Initialize the device.
     */
    // =========================================================
    @Override
    public void init_device() throws DevFailed {
        System.out.println("TangoUnitFactory() create " + device_name);

        // Initialise variables to default values
        // -------------------------------------------
        // clean existing factory before

        factorySession = new Session();
        final String executable = Util.instance().get_ds_exec_name();
        final String instance = Util.instance().get_ds_inst_name();
        factorySession.setTestServer(executable, instance);

        set_state(DevState.ON);
    }

    // =========================================================
    /**
     * Method always executed before command execution.
     */
    // =========================================================
    @Override
    public void always_executed_hook() {
        get_logger().info("In always_executed_hook method()");
    }

    // ===================================================================
    /**
     * Method called by the read_attributes CORBA operation to read device
     * hardware
     * 
     * @param attr_list
     *            Vector of index in the attribute vector of attribute to be
     *            read
     */
    // ===================================================================
    @Override
    public void read_attr_hardware(final Vector attr_list) throws DevFailed {
        get_logger().info("In read_attr_hardware for " + attr_list.size() + " attribute(s)");

        // Switch on attribute name
        // ---------------------------------
    }

    // ===================================================================
    /**
     * Method called by the read_attributes CORBA operation to set internal
     * attribute value.
     * 
     * @param attr
     *            reference to the Attribute object
     */
    // ===================================================================
    @Override
    public void read_attr(final Attribute attr) throws DevFailed {
        final String attr_name = attr.get_name();
        get_logger().info("In read_attr for attribute " + attr_name);

        // Switch on attribute name
        // ---------------------------------
        if (attr_name == "controlledDevices") {
            // Add your own code here
            final String[][] inf = factorySession.getTestDevicesConfiguration();
            int x, y;
            if (inf.length == 0) {
                x = 0;
                y = 0;
            } else {
                y = inf[0].length;
                x = inf.length;
            }
            attr.set_value(Session.flatten(inf), x, y);
        }
    }

    // =========================================================
    /**
     * Execute command "CreateDevice" on device. Create and start a new session
     * of TangoUnit
     * 
     * @return Name of the new Device
     */
    // =========================================================
    public String create_device() throws DevFailed {
        String argout = new String();

        get_logger().info("Entering create_device()");

        // ---Add your Own code to control device here ---
        // Find another way to get the classes that can be instanciate
        final Vector classes = Util.instance().get_dserver_device().get_class_list();
        for (final Iterator it = classes.iterator(); it.hasNext();) {
            final DeviceClass deviceClass = (DeviceClass) it.next();
            final String classname = deviceClass.get_name();
            if ("TangoUnit".equalsIgnoreCase(classname)) {
                // test for dyn device
                // Get information of this program (the current process)
                final Device dynDev = factorySession.addTestDevice(classname);
                factorySession.createTestDevice(dynDev.getName());
                deviceClass.device_factory(new String[]{dynDev.getName()});
                // return the new fresh baby device :-)
                argout = dynDev.getName();
                break;
            }
        }

        get_logger().info("Exiting create_device()");
        return argout;
    }

    // =========================================================
    /**
     * Execute command "ReleaseDevice" on device. It's very important to release
     * a device after use because it can be reuse in place of build a new one.
     * 
     * @param argin
     *            Name of the device to release
     */
    // =========================================================
    public void release_device(final String argin) throws DevFailed {
        get_logger().info("Entering release_device()");

        // ---Add your Own code to control device here ---
        final Vector classes = Util.instance().get_dserver_device().get_class_list();
        for (final Iterator it = classes.iterator(); it.hasNext();) {
            final DeviceClass deviceClass = (DeviceClass) it.next();
            final String classname = deviceClass.get_name();
            if ("TangoUnit".equalsIgnoreCase(classname)) {
                // test for dyn device
                // Get information of this program (the current process)

                ApiUtil.get_db_obj().unexport_device(argin);
                final Device dynDev = factorySession.deleteTestDevice(argin);
                factorySession.removeTestDevice(dynDev.getName());

                // remove from list will destroy it, isn't it ?
                final Vector devices = deviceClass.get_device_list();
                for (final Iterator iterator = devices.iterator(); iterator.hasNext();) {
                    final DeviceImpl dev = (DeviceImpl) iterator.next();
                    if (dev.get_name().equalsIgnoreCase(dynDev.getName())) {
                        dev.delete_device();
                        iterator.remove();
                        break;
                    }
                }
                break;

            }
        }

        get_logger().info("Exiting release_device()");
    }

    // =========================================================
    /**
     * Execute command "ReleaseAll" on device. Release All devices created by
     * this factory
     * 
     */
    // =========================================================
    public void release_all() throws DevFailed {
        get_logger().info("Entering release_all()");

        // ---Add your Own code to control device here ---
        final String[][] config = factorySession.getTestDevicesConfiguration();
        for (final String[] device : config) {
            release_device(device[0]); // XXX so dependent
        }

        get_logger().info("Exiting release_all()");
    }

    // =========================================================
    /**
     * main part for the device server class
     */
    // =========================================================
    public static void main(final String[] argv) {
        try {
            final Util tg = Util.init(argv, "TangoUnitFactory");
            tg.server_init();

            System.out.println("Ready to accept request");

            tg.server_run();
        } catch (final OutOfMemoryError ex) {
            System.err.println("Can't allocate memory !!!!");
            System.err.println("Exiting");
        } catch (final UserException ex) {
            Except.print_exception(ex);

            System.err.println("Received a CORBA user exception");
            System.err.println("Exiting");
        } catch (final SystemException ex) {
            Except.print_exception(ex);

            System.err.println("Received a CORBA system exception");
            System.err.println("Exiting");
        }

        System.exit(-1);
    }

    @Override
    public void delete_device() throws DevFailed {
        if (factorySession != null) {
            release_all();
        }
    }
}
// --------------------------------------------------------------------------
/*
 * end of $Source:
 * /usr/local/CVS/DeviceServer/Generic/Quality/TangoUnit/src/main
 * /java/TangoUnitFactory/TangoUnitFactory.java,v $
 */
