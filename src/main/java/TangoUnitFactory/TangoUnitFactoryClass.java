//+======================================================================
// $Source: /usr/local/CVS/DeviceServer/Generic/Quality/TangoUnit/src/main/java/TangoUnitFactory/TangoUnitFactoryClass.java,v $
//
// Project:   	Tango Device Server
//
// Description:	java source code for the TangoUnitFactory class .
//              This class is a singleton class and implements everything
//              which exists only once for all the  TangoUnitFactory object
//              It inherits from the DeviceClass class.
//
// $Author: hardion $
//
// $Revision: 1.3 $
//
// $Log: TangoUnitFactoryClass.java,v $
// Revision 1.3  2009/01/29 14:37:26  hardion
// Try to fix some problem ( connection failed, ... ????)
//
// Revision 1.2  2009/01/26 10:30:34  hardion
// * release TangoUnit when init Factory
// * add release all in Factory (expert use only)
// * add adding properties for device in TangoUnit
//
// Revision 1.1  2009/01/21 15:17:39  hardion
// * try to add a factory for Tangounit device creation bug:11454
// * finish implementation of remote client
//
//
// copyleft :    European Synchrotron Radiation Facility
//               BP 220, Grenoble 38043
//               FRANCE
//
//-======================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

package TangoUnitFactory;

import java.util.Vector;

import fr.esrf.Tango.DevFailed;
import fr.esrf.Tango.DispLevel;
import fr.esrf.TangoApi.DbDatum;
import fr.esrf.TangoDs.DeviceClass;
import fr.esrf.TangoDs.DeviceImpl;
import fr.esrf.TangoDs.ImageAttr;
import fr.esrf.TangoDs.TangoConst;
import fr.esrf.TangoDs.Util;

public class TangoUnitFactoryClass extends DeviceClass implements TangoConst {
	/**
	 * TangoUnitFactoryClass class instance (it is a singleton).
	 */
	private static TangoUnitFactoryClass _instance = null;

	/**
	 * Class properties array.
	 */
	private DbDatum[] cl_prop = null;

	// --------- Start of properties data members ----------

	// --------- End of properties data members ----------

	// ===================================================================
	//
	// method : instance()
	// 
	// description : static method to retrieve the TangoUnitFactoryClass object
	// once it has been initialised
	//
	// ===================================================================
	public static TangoUnitFactoryClass instance() {
		if (_instance == null) {
			System.err.println("TangoUnitFactoryClass is not initialised !!!");
			System.err.println("Exiting");
			System.exit(-1);
		}
		return _instance;
	}

	// ===================================================================
	//
	// method : Init()
	// 
	// description : static method to create/retrieve the TangoUnitFactoryClass
	// object. This method is the only one which enables a
	// user to create the object
	//
	// in : - class_name : The class name
	//
	// ===================================================================
	public static TangoUnitFactoryClass init(String class_name)
			throws DevFailed {
		if (_instance == null) {
			_instance = new TangoUnitFactoryClass(class_name);
		}
		return _instance;
	}

	// ===================================================================
	//
	// method : TangoUnitFactoryClass()
	// 
	// description : constructor for the TangoUnitFactoryClass class
	//
	// argument : in : - name : The class name
	//
	// ===================================================================
	protected TangoUnitFactoryClass(String name) throws DevFailed {
		super(name);

		Util.out2.println("Entering TangoUnitFactoryClass constructor");
		this.write_class_property();
		this.get_class_property();

		Util.out2.println("Leaving TangoUnitFactoryClass constructor");
	}

	// ===================================================================
	//
	// method : command_factory()
	// 
	// description : Create the command object(s) and store them in the
	// command list
	// ===================================================================
	@Override
	public void command_factory() {
		command_list.addElement(new CreateDeviceClass("CreateDevice",
				Tango_DEV_VOID, Tango_DEV_STRING, "", "Name of the new Device",
				DispLevel.OPERATOR));
		command_list.addElement(new ReleaseDeviceClass("ReleaseDevice",
				Tango_DEV_STRING, Tango_DEV_VOID,
				"Name of the device to release", "", DispLevel.OPERATOR));
		command_list.addElement(new ReleaseAllClass("ReleaseAll",
				Tango_DEV_VOID, Tango_DEV_VOID, "", "", DispLevel.OPERATOR));

		// add polling if any
		for (int i = 0; i < command_list.size(); i++) {
		}
	}

	// ===================================================================
	//
	// method : device_factory()
	// 
	// description : Create the device object(s) and store them in the
	// device list
	//
	// argument : in : String[] devlist : The device name list
	//
	// ===================================================================
	@Override
	public void device_factory(String[] devlist) throws DevFailed {

		for (int i = 0; i < devlist.length; i++) {
			Util.out4.println("Device name : " + devlist[i]);

			// Create device and add it into the device list
			// ----------------------------------------------
			device_list.addElement(new TangoUnitFactory(this, devlist[i]));

			// Export device to the outside world
			// ----------------------------------------------
			if (Util._UseDb == true) {
				this.export_device(((DeviceImpl) (device_list.elementAt(i))));
			} else {
				this.export_device(((DeviceImpl) (device_list.elementAt(i))),
						devlist[i]);
			}
		}
	}

	//==========================================================================
	// ===
	//
	// Method: attribute_factory(Vector att_list)
	//
	//==========================================================================
	// ===
	@Override
	public void attribute_factory(Vector att_list) throws DevFailed {
		// Attribute : controlledDevices
		ImageAttr controlled_devices = new ImageAttr("controlledDevices",
				Tango_DEV_STRING, 255, 10);
		att_list.addElement(controlled_devices);

	}

	// ===================================================================
	/**
	 * Get the class property for specified name.
	 * 
	 * @param name
	 *            The property name.
	 */
	// ===================================================================
	public DbDatum get_class_property(String name) {
		for (int i = 0; i < cl_prop.length; i++) {
			if (cl_prop[i].name.equals(name)) {
				return cl_prop[i];
			}
		}
		// if not found, return an empty DbDatum
		return new DbDatum(name);
	}

	// ===================================================================
	/**
	 * Read the class properties from database.
	 */
	// ===================================================================
	public void get_class_property() throws DevFailed {
		// Initialize your default values here.
		// ------------------------------------------

		// Read class properties from database.(Automatic code generation)
		// -------------------------------------------------------------
		if (Util._UseDb == false) {
			return;
		}
		String[] propnames = {};

		// Call database and extract values
		// --------------------------------------------
		cl_prop = this.get_db_class().get_property(propnames);

		// End of Automatic code generation
		// -------------------------------------------------------------

	}

	// ===================================================================
	/**
	 * Set class description as property in database
	 */
	// ===================================================================
	private void write_class_property() throws DevFailed {
		// First time, check if database used
		// --------------------------------------------
		if (Util._UseDb == false) {
			return;
		}

		// Prepeare DbDatum
		// --------------------------------------------
		DbDatum[] data = new DbDatum[2];
		data[0] = new DbDatum("ProjectTitle");
		data[0].insert("Tango Device Server");

		data[1] = new DbDatum("Description");
		data[1]
				.insert("This class has the role to create and manage TangoUnit device.\nIt based on factory pattern.\nIt allows to create device on the same process (asa same JVM) while its execution.");

		// Call database and and values
		// --------------------------------------------
		this.get_db_class().put_property(data);
	}

}
