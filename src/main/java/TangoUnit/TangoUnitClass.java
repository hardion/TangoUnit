//+======================================================================
// $Source: /usr/local/CVS/DeviceServer/Generic/Quality/TangoUnit/src/main/java/TangoUnit/TangoUnitClass.java,v $
//
// Project:   	Tango Device Server
//
// Description:	java source code for the TangoUnit class .
//              This class is a singleton class and implements everything
//              which exists only once for all the  TangoUnit object
//              It inherits from the DeviceClass class.
//
// $Author: hardion $
//
// $Revision: 1.6 $
//
// $Log: TangoUnitClass.java,v $
// Revision 1.6  2009/01/30 07:50:08  hardion
// org import
//
// Revision 1.5  2009/01/26 10:30:34  hardion
// * release TangoUnit when init Factory
// * add release all in Factory (expert use only)
// * add adding properties for device in TangoUnit
//
// Revision 1.4  2009/01/22 16:31:35  hardion
// * add asynchronous mode
// * fix release of device controlled by the factory
//
// Revision 1.3  2009/01/21 15:17:39  hardion
// * try to add a factory for Tangounit device creation bug:11454
// * finish implementation of remote client
//
// Revision 1.2  2008/12/05 18:27:08  hardion
// Version Alpha
//
// Revision 1.1  2008/11/07 13:00:31  le
// initial import
//
//
// copyleft :    European Synchrotron Radiation Facility
//               BP 220, Grenoble 38043
//               FRANCE
//
//-======================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

package TangoUnit;

import java.util.Vector;

import fr.esrf.Tango.AttrWriteType;
import fr.esrf.Tango.DevFailed;
import fr.esrf.Tango.DispLevel;
import fr.esrf.TangoApi.DbDatum;
import fr.esrf.TangoDs.Attr;
import fr.esrf.TangoDs.DeviceClass;
import fr.esrf.TangoDs.DeviceImpl;
import fr.esrf.TangoDs.ImageAttr;
import fr.esrf.TangoDs.TangoConst;
import fr.esrf.TangoDs.UserDefaultAttrProp;
import fr.esrf.TangoDs.Util;
import fr.soleil.tangounit.device.Factories;
import fr.soleil.tangounit.device.Starter.Platform;

public class TangoUnitClass extends DeviceClass implements TangoConst {
	/**
	 * TangoUnitClass class instance (it is a singleton).
	 */
	private static TangoUnitClass _instance = null;

	/**
	 * Class properties array.
	 */
	private DbDatum[] cl_prop = null;

	// --------- Start of properties data members ----------

	/**
	 * Describe which class of device is executed by which programs Format
	 * :" [CLASS]:[PROGRAMS] without hooks " Example : GalilAxis:ds_ControlBox
	 * ControlBox:ds_ControlBox
	 */
	String[] classAndPrograms = new String[] {};
	/**
	 * Describe the host where the TangoUnit device can start theirs devices
	 * Format: [Name of Starter device]:[Platform (LINUX|WIN32)] Example :
	 * tango/admin/david:WIN32 tango/admin/massenet:LINUX
	 */
	String[] hosts = new String[] {};

	// --------- End of properties data members ----------

	// ===================================================================
	//
	// method : instance()
	// 
	// description : static method to retrieve the TangoUnitClass object
	// once it has been initialised
	//
	// ===================================================================
	public static TangoUnitClass instance() {
		if (_instance == null) {
			System.err.println("TangoUnitClass is not initialised !!!");
			System.err.println("Exiting");
			System.exit(-1);
		}
		return _instance;
	}

	// ===================================================================
	//
	// method : Init()
	// 
	// description : static method to create/retrieve the TangoUnitClass
	// object. This method is the only one which enables a
	// user to create the object
	//
	// in : - class_name : The class name
	//
	// ===================================================================
	public static TangoUnitClass init(String class_name) throws DevFailed {
		if (_instance == null) {
			_instance = new TangoUnitClass(class_name);
		}
		return _instance;
	}

	// ===================================================================
	//
	// method : TangoUnitClass()
	// 
	// description : constructor for the TangoUnitClass class
	//
	// argument : in : - name : The class name
	//
	// ===================================================================
	protected TangoUnitClass(String name) throws DevFailed {
		super(name);

		Util.out2.println("Entering TangoUnitClass constructor");
		this.write_class_property();
		this.get_class_property();

		Util.out2.println("Leaving TangoUnitClass constructor");
	}

	// ===================================================================
	//
	// method : command_factory()
	// 
	// description : Create the command object(s) and store them in the
	// command list
	// ===================================================================
	@Override
	public void command_factory() {
		command_list.addElement(new AddTestDeviceClass("AddTestDevice",
				Tango_DEV_STRING, Tango_DEV_STRING,
				"1arg : Class\nClass : define the class of device to test.\n",
				"Name of the device", DispLevel.OPERATOR));
		command_list
				.addElement(new AddDeviceClass(
						"AddDevice",
						Tango_DEVVAR_STRINGARRAY,
						Tango_DEV_STRING,
						"1arg to 5args : Class, [ [Server | Platform] [Instance] [Device]]\nClass : define the class of device.(required)\nServer : define the host where the DeviceServer have to run (*)(**)\nPlatform : define the platform where the DeviceServer have to run (*)(**)\nInstance : define the name of the server i.e \"MyInstance\" in ds_ControlBox/MyInstance (*)\nDevice : define the name of the device (*)(***)\n\n\n",
						"Name of the device", DispLevel.OPERATOR));
		command_list.addElement(new AddDevicePropertiesClass(
				"AddDeviceProperties", Tango_DEVVAR_STRINGARRAY,
				Tango_DEV_VOID,
				"3arg to x args : NameOfDevice,Property 1,Value 1, ...", "",
				DispLevel.EXPERT));
		command_list.addElement(new CreateClass("Create", Tango_DEV_VOID,
				Tango_DEV_VOID, "", "", DispLevel.OPERATOR));
		command_list.addElement(new StartClass("Start", Tango_DEV_VOID,
				Tango_DEV_VOID, "", "", DispLevel.OPERATOR));
		command_list.addElement(new StopClass("Stop", Tango_DEV_VOID,
				Tango_DEV_VOID, "", "", DispLevel.OPERATOR));
		command_list.addElement(new DeleteClass("Delete", Tango_DEV_VOID,
				Tango_DEV_VOID, "", "", DispLevel.OPERATOR));

		// add polling if any
		for (int i = 0; i < command_list.size(); i++) {
		}
	}

	// ===================================================================
	//
	// method : device_factory()
	// 
	// description : Create the device object(s) and store them in the
	// device list
	//
	// argument : in : String[] devlist : The device name list
	//
	// ===================================================================
	@Override
	public void device_factory(String[] devlist) throws DevFailed {

		for (int i = 0; i < devlist.length; i++) {
			Util.out4.println("Device name : " + devlist[i]);

			// Create device and add it into the device list
			// ----------------------------------------------
			DeviceImpl device = new TangoUnit(this, devlist[i]);
			device_list.addElement(device);

			// Export device to the outside world
			// ----------------------------------------------
			if (Util._UseDb == true) {
				this.export_device(device);

			} else {
				this.export_device(device, devlist[i]);
			}
		}
	}

	//==========================================================================
	// ===
	//
	// Method: attribute_factory(Vector att_list)
	//
	//==========================================================================
	// ===
	@Override
	public void attribute_factory(Vector att_list) throws DevFailed {
		// Attribute : devices
		ImageAttr devices = new ImageAttr("devices", Tango_DEV_STRING, 10, 200);
		UserDefaultAttrProp devices_prop = new UserDefaultAttrProp();
		devices_prop.set_label("Devices");
		devices_prop
				.set_description("Described the current configuration of TangoUnit");
		devices.set_default_properties(devices_prop);
		att_list.addElement(devices);

		ImageAttr testDevices = new ImageAttr("testDevices", Tango_DEV_STRING,
				10, 200);
		devices_prop = new UserDefaultAttrProp();
		devices_prop.set_label("Devices to test");
		devices_prop
				.set_description("Described the current configuration of devices to test");
		devices.set_default_properties(devices_prop);
		att_list.addElement(testDevices);

		Attr testServer = new Attr("testServer", Tango_DEV_STRING,
				AttrWriteType.READ_WRITE);
		devices_prop = new UserDefaultAttrProp();
		devices_prop.set_label("Server to test");
		devices_prop
				.set_description("Described the current configuration of server to test");
		devices.set_default_properties(devices_prop);
		att_list.addElement(testServer);

	}

	// ===================================================================
	/**
	 * Get the class property for specified name.
	 * 
	 * @param name
	 *            The property name.
	 */
	// ===================================================================
	public DbDatum get_class_property(String name) {
		for (int i = 0; i < cl_prop.length; i++) {
			if (cl_prop[i].name.equals(name)) {
				return cl_prop[i];
			}
		}
		// if not found, return an empty DbDatum
		return new DbDatum(name);
	}

	// ===================================================================
	/**
	 * Read the class properties from database.
	 */
	// ===================================================================
	public void get_class_property() throws DevFailed {
		// Initialize your default values here.
		// ------------------------------------------

		// Read class properties from database.(Automatic code generation)
		// -------------------------------------------------------------
		if (Util._UseDb == false) {
			return;
		}
		String[] propnames = { "ClassAndPrograms", "Hosts" };

		// Call database and extract values
		// --------------------------------------------
		cl_prop = this.get_db_class().get_property(propnames);
		int i = -1;
		// Extract ClassAndPrograms value
		if (cl_prop[++i].is_empty() == false) {
			classAndPrograms = cl_prop[i].extractStringArray();
		} else {
			cl_prop[i].insert(classAndPrograms);
		}

		// Extract Hosts value
		if (cl_prop[++i].is_empty() == false) {
			hosts = cl_prop[i].extractStringArray();
		} else {
			cl_prop[i].insert(hosts);
		}

		// End of Automatic code generation
		// -------------------------------------------------------------

		for (String cp : classAndPrograms) {
			String[] entry = cp.split(":");
			if (entry.length == 2) {
				Factories.programs.put(entry[0], entry[1]);
			}
		}

		for (String host : hosts) {
			String[] entry = host.split(":");
			if (entry.length == 2) {
				Factories.addStarter(entry[0], Platform.valueOf(entry[1]));
			}
		}

	}

	// ===================================================================
	/**
	 * Set class description as property in database
	 */
	// ===================================================================
	private void write_class_property() throws DevFailed {
		// First time, check if database used
		// --------------------------------------------
		if (Util._UseDb == false) {
			return;
		}

		// Prepeare DbDatum
		// --------------------------------------------
		DbDatum[] data = new DbDatum[2];
		data[0] = new DbDatum("ProjectTitle");
		data[0].insert("Tango Device Server");

		data[1] = new DbDatum("Description");
		data[1]
				.insert("TangoUnit is a device that help to create unit test in any xUnit framework.");

		// Call database and and values
		// --------------------------------------------
		this.get_db_class().put_property(data);
	}

}
