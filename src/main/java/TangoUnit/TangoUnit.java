//+============================================================================
// $Source: /usr/local/CVS/DeviceServer/Generic/Quality/TangoUnit/src/main/java/TangoUnit/TangoUnit.java,v $
//
// project :     Tango Device Server
//
// Description:	java source code for the TangoUnit class and its commands.
//              This class is derived from DeviceImpl class.
//              It represents the CORBA servant obbject which
//              will be accessed from the network. All commands which
//              can be executed on the TangoUnit are implemented
//              in this file.
//
// $Author: abeille $
//
// $Revision: 1.8 $
//
// $Log: TangoUnit.java,v $
// Revision 1.8  2010/08/03 14:37:12  abeille
// add delete_device for tangorb 7.3.2
//
// Revision 1.7  2009/01/30 17:22:56  hardion
// * modify how to add property to a device
//
// Revision 1.6  2009/01/28 16:20:32  hardion
// Fix concurrent pb
// Init of TAngoUnit clean correctly the db
// Clean TangoUnit before release by factory
//
// Revision 1.5  2009/01/26 10:30:34  hardion
// * release TangoUnit when init Factory
// * add release all in Factory (expert use only)
// * add adding properties for device in TangoUnit
//
// Revision 1.4  2009/01/22 16:31:35  hardion
// * add asynchronous mode
// * fix release of device controlled by the factory
//
// Revision 1.3  2009/01/21 15:17:39  hardion
// * try to add a factory for Tangounit device creation bug:11454
// * finish implementation of remote client
//
// Revision 1.2  2008/12/05 18:27:08  hardion
// Version Alpha
//
// Revision 1.1  2008/11/07 13:00:31  le
// initial import
//
//
// copyleft :   European Synchrotron Radiation Facility
//              BP 220, Grenoble 38043
//              FRANCE
//
//-============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
package TangoUnit;

import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.omg.CORBA.SystemException;
import org.omg.CORBA.UserException;

import fr.esrf.Tango.DevFailed;
import fr.esrf.Tango.DevState;
import fr.esrf.TangoDs.Attribute;
import fr.esrf.TangoDs.DeviceClass;
import fr.esrf.TangoDs.DeviceImpl;
import fr.esrf.TangoDs.Except;
import fr.esrf.TangoDs.TangoConst;
import fr.esrf.TangoDs.Util;
import fr.esrf.TangoDs.WAttribute;
import fr.soleil.tangounit.Session;
import fr.soleil.tangounit.device.Server;

/**
 * Class Description: TangoUnit is a device that help to create unit test in any xUnit framework.
 *
 * @author $Author: abeille $
 * @version $Revision: 1.8 $
 */
// --------- Start of States Description ----------
/*
 * Device States Description: DevState.INIT : Initialization of the device
 * DevState.STANDBY : Ready to change the configuration DevState.OFF : The
 * configuration was successfully created in database. Ready to start
 * DevState.ON : The configuration was successfully started. Ready to use.
 */
// --------- End of States Description ----------
public class TangoUnit extends DeviceImpl implements TangoConst {

  protected int state;
  // --------- Start of attributes data members ----------
  protected String[] attr_devices_read = new String[2000];

  // --------- End of attributes data members ----------
  // --------- Start of properties data members ----------
  // --------- End of properties data members ----------
  // Add your own data members here
  // --------------------------------------
  // =========================================================
  /**
   * Constructor for simulated Time Device Server.
   *
   * @param cl The DeviceClass object
   * @param s The Device name.
   */
  // =========================================================
  TangoUnit(final DeviceClass cl, final String s) throws DevFailed {
    super(cl, s);
    init_device();

  }

  /*
   * must be only call from TangoUnitFactory workaround for a delete_device
   * standard method
   * 
   * @see java.lang.Object#finalize()
   */
  @Override
  public void delete_device() throws DevFailed {
    new Thread() {

      /*
       * (non-Javadoc)
       * 
       * @see java.lang.Thread#run()
       */
      @Override
      public void run() {
        try {
          session.init();

        } catch (final DevFailed e) {
          e.printStackTrace();
        }
      }
    }.start();
  }

  // =========================================================
  /**
   * Constructor for simulated Time Device Server.
   *
   * @param cl The DeviceClass object
   * @param s The Device name.
   * @param d Device description.
   */
  // =========================================================
  TangoUnit(final DeviceClass cl, final String s, final String d) throws DevFailed {
    super(cl, s, d);
    init_device();
  }
  // =========================================================
  /**
   * Initialize the device.
   */
  // =========================================================
  Session session = null;
  private Thread stopThread;
  private Thread startThread;
  private Thread initThread;

  @Override
  public void init_device() throws DevFailed {
    System.out.println("TangoUnit() create " + device_name);

    // Initialise variables to default values
    // -------------------------------------------
    set_state(DevState.INIT);
    // This condition should be passed
    // because the state machine of this device don't protect
    // this implementation
    if (initThread != null && initThread.isAlive()) {
      try {
        initThread.join();
      } catch (final InterruptedException e) {
        e.printStackTrace();
      }
    }

    initThread = new Thread() {

      /*
       * (non-Javadoc)
       * 
       * @see java.lang.Thread#run()
       */
      @Override
      public void run() {
        try {
          if (session != null) {
            session.init();
          }
          session = new Session();
          TangoUnit.this.set_state(DevState.STANDBY);

        } catch (final DevFailed e) {
          e.printStackTrace();
          TangoUnit.this.set_state(DevState.FAULT);
          TangoUnit.this.set_status("Error while init session");
        }
      }
    };
    initThread.start();

  }

  // =========================================================
  /**
   * Method always executed before command execution.
   */
  // =========================================================
  @Override
  public void always_executed_hook() {
    get_logger().info("In always_executed_hook method()");
  }

  // ===================================================================
  /**
   * Method called by the read_attributes CORBA operation to read device hardware
   *
   * @param attr_list Vector of index in the attribute vector of attribute to be read
   */
  // ===================================================================
  @Override
  public void read_attr_hardware(final Vector attr_list) throws DevFailed {
    get_logger().info("In read_attr_hardware for " + attr_list.size() + " attribute(s)");

    // Switch on attribute name
    // ---------------------------------
  }

  // ===================================================================
  /**
   * Method called by the read_attributes CORBA operation to set internal attribute value.
   *
   * @param attr reference to the Attribute object
   */
  // ===================================================================
  @Override
  public void read_attr(final Attribute attr) throws DevFailed {
    final String attr_name = attr.get_name();
    get_logger().info("In read_attr for attribute " + attr_name);

    // Switch on attribute name
    // ---------------------------------
    if (attr_name == "devices") {

      final String[][] inf = session.getDevicesConfiguration();
      int x, y;
      if (inf.length == 0) {
        x = 0;
        y = 0;
      } else {
        y = inf[0].length;
        x = inf.length;
      }
      attr.set_value(Session.flatten(inf), x, y);
    } else if (attr_name == "testDevices") {
      final String[][] inf = session.getTestDevicesConfiguration();
      int x, y;
      if (inf.length == 0) {
        x = 0;
        y = 0;
      } else {
        y = inf[0].length;
        x = inf.length;
      }
      attr.set_value(Session.flatten(inf), x, y);

    } else if (attr_name == "testServer") {
      final Server s = session.getTestServer();
      final String inf = s == null ? "" : session.getTestServer().getName();
      attr.set_value(inf);
    }
  }

  /*
   * (non-Javadoc)
   * 
   * @see fr.esrf.TangoDs.DeviceImpl#write_attr_hardware(java.util.Vector)
   */
  @Override
  public void write_attr_hardware(final Vector attr_list) throws DevFailed {
    for (int i = 0; i < attr_list.size(); i++) {
      final WAttribute att = dev_attr.get_w_attr_by_ind(((Integer) attr_list.elementAt(i))
              .intValue());
      final String attr_name = att.get_name();
      if ("testServer".equals(attr_name)) {
        session.setTestServer(att.getStringWriteValue());
      }
    }
  }

  // =========================================================
  /**
   * Execute command "AddDevice" on device. Add a device to the configuration
   *
   * @param argin 1arg to 5args : Class, [ [Server | Platform] [Instance] [Device]]\nClass : define the class of
   * device.(required)\nServer : define the host where the DeviceServer have to run (*)(**)\nPlatform : define the
   * platform where the DeviceServer have to run (*)(**)\nInstance : define the name of the server i.e "MyInstance" in
   * ds_ControlBox/MyInstance (*)\nDevice : define the name of the device (*)(***)\n\n\n
   * @return Name of the device
   */
  // =========================================================
  public String add_device(final String[] argin) throws DevFailed {
    String argout = new String();

    get_logger().info("Entering add_device()");
    final int length = argin.length;

    if (length == 1) {
      argout = session.addDevice(argin[0]).getName();
    } else if (length == 2) {
      argout = session.addDevice(argin[0], argin[1]).getName();
    } else if (length == 3) {
      argout = session.addDevice(argin[0], argin[1], argin[2]).getName();
    } else if (length == 4) {
      argout = session.addDevice(argin[0], argin[1], argin[2], argin[3]).getName();
    }

    // ---Add your Own code to control device here ---

    get_logger().info("Exiting add_device()");
    return argout;
  }

  // =========================================================
  /**
   * Execute command "AddDevice" on device. Add a device to the configuration
   *
   * @param argin 1arg to 5args : Class, [ [Server | Platform] [Instance] [Device]]\nClass : define the class of
   * device.(required)\nServer : define the host where the DeviceServer have to run (*)(**)\nPlatform : define the
   * platform where the DeviceServer have to run (*)(**)\nInstance : define the name of the server i.e "MyInstance" in
   * ds_ControlBox/MyInstance (*)\nDevice : define the name of the device (*)(***)\n\n\n
   * @return Name of the device
   */
  // =========================================================
  public String add_test_device(final String argin) throws DevFailed {
    String argout = new String();

    get_logger().info("Entering add_device()");
    argout = session.addTestDevice(argin).getName();
    // ---Add your Own code to control device here ---

    get_logger().info("Exiting add_device()");
    return argout;
  }

  // =========================================================
  /**
   * Execute command "Create" on device. Create all Servers, devices and properties defined by the configuration in the
   * tango database
   *
   */
  // =========================================================
  public void create() throws DevFailed {
    get_logger().info("Entering create()");

    // ---Add your Own code to control device here ---

    try {

      session.create();
      set_state(DevState.OFF);
    } catch (final DevFailed e) {
      set_state(DevState.STANDBY);
      session.delete();
      throw e;
    }

    get_logger().info("Exiting create()");
  }

  // =========================================================
  /**
   * Execute command "Start" on device. Start All Servers defined by the configuration
   *
   */
  // =========================================================
  public void start() throws DevFailed {
    get_logger().info("Entering start()");

    // ---Add your Own code to control device here ---
    // This condition should not be passed
    // because the state machine of this device should protect
    // this implementation
    if (startThread != null && startThread.isAlive()) {
      try {
        startThread.join();
      } catch (final InterruptedException e) {
        e.printStackTrace();
      }
    }

    startThread = new Thread() {
      @Override
      public void run() {
        try {
          session.start();
          TangoUnit.this.set_state(DevState.ON);
        } catch (final DevFailed e) {
          Logger.global.log(Level.SEVERE, "Unable to start all devices");
          TangoUnit.this.set_state(DevState.OFF);
        }
      }
    };
    set_state(DevState.MOVING);
    startThread.start();
    get_logger().info("Exiting start()");
  }

  // =========================================================
  /**
   * Execute command "Stop" on device. Stop All Server defined by the configuration
   *
   */
  // =========================================================
  public void stop() throws DevFailed {
    get_logger().info("Entering stop()");

    // ---Add your Own code to control device here ---
    // This condition should not be passed
    // because the state machine of this device should protect
    // this implementation
    if (stopThread != null && stopThread.isAlive()) {
      try {
        stopThread.join();
      } catch (final InterruptedException e) {
        e.printStackTrace();
      }
    }

    stopThread = new Thread() {
      @Override
      public void run() {
        try {
          session.stop();
        } catch (final DevFailed e) {
          Logger.global.log(Level.SEVERE, "Unable to stop all devices");
        } finally {
          TangoUnit.this.set_state(DevState.OFF);
        }
      }
    };
    set_state(DevState.MOVING);
    stopThread.start();

    get_logger().info("Exiting stop()");
  }

  // =========================================================
  /**
   * Execute command "Delete" on device. Delete all information from database included Servers, Devices and Properties
   *
   */
  // =========================================================
  public void delete() throws DevFailed {
    get_logger().info("Entering delete()");

    // ---Add your Own code to control device here ---
    try {
      session.delete();
      set_state(DevState.STANDBY);
    } catch (final DevFailed e) {
      throw e;
    }

    get_logger().info("Exiting delete()");
  }

  // =========================================================
  /**
   * Add new properties for the given device. Format : ["NameOfDevice","Property 1","Value 1", ...] Example :
   * ["test/tangotest/1", "Don't leak memory","true"]
   *
   */
  // =========================================================
  public void add_device_properties(final String[] array) throws DevFailed {
    get_logger().info("Entering add_device_properties()");

    // ---Add your Own code to control device here ---
    final String device = array[0];
    final String property = array[1];

    final String[] values = new String[(array.length - 2)];

    for (int i = 0; i < values.length; i++) {
      values[i] = array[i + 2];
    }
    session.addDeviceProperty(device, property, values);

    get_logger().info("Exiting add_device_properties()");

  }

  // =========================================================
  /**
   * main part for the device server class
   */
  // =========================================================
  public static void main(final String[] argv) {
    try {
      final Util tg = Util.init(argv, "TangoUnit");
      tg.server_init();

      System.out.println("Ready to accept request");

      tg.server_run();
    } catch (final OutOfMemoryError ex) {
      System.err.println("Can't allocate memory !!!!");
      System.err.println("Exiting");
    } catch (final UserException ex) {
      Except.print_exception(ex);

      System.err.println("Received a CORBA user exception");
      System.err.println("Exiting");
    } catch (final SystemException ex) {
      Except.print_exception(ex);

      System.err.println("Received a CORBA system exception");
      System.err.println("Exiting");
    }

    System.exit(-1);
  }
}
// --------------------------------------------------------------------------
/*
 * end of $Source:
 * /usr/local/CVS/DeviceServer/Generic/Quality/TangoUnit/src/main
 * /java/TangoUnit/TangoUnit.java,v $
 */
